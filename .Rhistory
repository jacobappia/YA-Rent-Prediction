setwd("~/YA Rent Prediction")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("Data/YA_apartments.csv")
summary(data)
str(data)
View(data)
## excluding irrevelant field such as name and address from the data
data <- data[, -c(1,2)]
summary(data)
## converting categorical column as factors
data$Parking <- factor(data$Parking)
summary(data)
data$Utilities <- factor(data$Utilities)
data$Type.of.Laundry <- factor(data$Type.of.Laundry)
summary(data)
data %>% drop_na()
library(tidymodels)
library(tidyverse)
data %>% drop_na()
data
data %>% filter(Rent == NA)
data %>% filter('Rent' == NA)
data %>% select(Rent)
data %>% select(Rent) %>% drop_na()
data %>% select(Rent) %>% drop_na() %>% unserialize()
data %>% filter(is.na(Rent))
data %>% filter(is.na(Rent)) %>% drop()
data %>% drop(is.na(Rent))
?drop()
data %>% filter(!is.na(Rent))
## The missing values in Rent column will be dropped since there was no info on the website.
data <- data %>% filter(!is.na(Rent))
data$Beds %>% str_replace_na(1)
data$Beds
data$Beds %>% str_replace_na(1)
data$Beds %>% replace_na(1)
##
levels(data$Type.of.Laundry)
##
levels(data$Type.of.Laundry) %>% str_detect("unit")
fix_TypeOfLaundry_data(x){
fix_TypeOfLaundry_data <- function (x) {
ifelse(x%in%c("coin","Coin","Coin (in unit W/D for remodels)")), "Coin",
fix_TypeOfLaundry_data <- function (x) {
fix_TypeOfLaundry_data <- function (x) {
fix_TypeOfLaundry_data <- function (x) {
ifelse(x%in%c("coin","Coin","Coin (in unit W/D for remodels)"), "Coin",ifelse(x%in%c("In Unit", "in unit washer / Dryer", "In-unit", "In-Unit", "In-unit W/D", "Inp-unit", "On premise", "W/D in Unit", "W/D In unit", "W/D In Unit"), "In-Unit", x))
}
fix_TypeOfLaundry_data("coin")
fix_TypeOfLaundry_data("tree")
data %>% mutate(
Type.of.Laundry = fix_TypeOfLaundry_data(Type.of.Laundry)
)
data <- data %>% mutate(
Type.of.Laundry = fix_TypeOfLaundry_data(Type.of.Laundry)
)
summary(data)
data$Type.of.Laundry <- factor(data$Type.of.Laundry)
summary(data)
## Checking on the website, the 2 missing values in Beds column as supposed to 1 for each.
data$Beds <- data$Beds %>% replace_na(1)
summary(data)
YA_data <- read.csv("Data/YA_apartments.csv")
str(YA_data)
## excluding irrevelant field such as name and address from the data
data <- YA_data[, -c(1,2)]
summary(data)
## converting categorical column as factors
data$Parking <- factor(data$Parking)
data$Utilities <- factor(data$Utilities)
data$Type.of.Laundry <- factor(data$Type.of.Laundry)
summary(data)
# Fixing NA's
## The missing values in Rent column will be dropped since there was no info on the website.
data <- data %>% filter(!is.na(Rent))
## Checking on the website, the 2 missing values in Beds column as supposed to 1 for each.
data$Beds <- data$Beds %>% replace_na(1)
View(YA_data)
data$Type.of.Laundry <- fix_TypeOfLaundry_data(data$Type.of.Laundry)
YA_data <- read.csv("Data/YA_apartments.csv")
str(YA_data)
## excluding irrevelant field such as name and address from the data
data <- YA_data[, -c(1,2)]
summary(data)
# Fixing NA's
## The missing values in Rent column will be dropped since there was no info on the website.
data <- data %>% filter(!is.na(Rent))
## Checking on the website, the 2 missing values in Beds column as supposed to 1 for each.
data$Beds <- data$Beds %>% replace_na(1)
## Create a function to fix the inconsistency in Type of Laundry column
fix_TypeOfLaundry_data <- function (x) {
ifelse(x %in% c("coin","Coin","Coin (in unit W/D for remodels)"), "Coin",
ifelse(x %in% c("In Unit", "in unit washer / Dryer", "In-unit", "In-Unit", "In-unit W/D", "Inp-unit", "On premise", "W/D in Unit", "W/D In unit", "W/D In Unit"), "In-Unit", x))
}
data$Type.of.Laundry <- fix_TypeOfLaundry_data(data$Type.of.Laundry)
str(YA_data)
summary(YA_data)
str(data)
## A function to compute the distance between two geo cordinates in km
haversine <- function(long1, lat1, long2, lat2, decimals=3)
{
## convert to radians
long1= long1 * pi / 180
lat1= lat1 * pi / 180
long2= long2 * pi / 180
lat2= lat2 * pi/ 180
## Earth mean radius in km
R = 6371
a= sin((lat2- lat1)/2)^2 + cos(lat1)*cos(lat2)*sin((long2 - long1)/2)^2
d= R * 2 * asin(sqrt(a))
## distance in km
return( round(d, decimals) )
}
data %>% mutate(
distance = haversine(ISU_long, ISU_lat, Longitude, Latitude)
)
## Latitude and longitude of ISU BONE STUDENT CENTER
ISU_lat = 40.5154253
ISU_long = -88.9950361
data %>% mutate(
distance = haversine(ISU_long, ISU_lat, Longitude, Latitude)
)
## Compute distance of each apartment from Bone student center in kilometers
data <- data %>% mutate(
distance = haversine(ISU_long, ISU_lat, Longitude, Latitude)
)
## Compute distance of each apartment from Bone student center in kilometers
final_data <- data %>% mutate(
distance = haversine(ISU_long, ISU_lat, Longitude, Latitude)
)
lm()
regression.md <- lm(Rent~., data = final_data)
summary(regression.md)
final_data %>% select(-c(Longitude,Latitude))
## We exclude latitude and longitude from the final data
final_data <- final_data %>% select(-c(Longitude,Latitude))
regression.md <- lm(Rent~., data = final_data)
summary(regression.md)
## create train and test data using rsample
set.seed(123)
split <- initial_split(final_data, prop=.7)
train <- training(split)
test <- testing(split)
kfolds <- vfold_cv(train)
# Recipes package
# preprocessing
tidy_rec <- recipe(Rent ~ ., data=train) %>%
step_dummy(all_nominal())
# Parsnip package
# api for creating models
boosted_model <- boost_tree(trees = tune(),
min_n = tune(),
#tree_depth = tune(),
loss_reduction = tune(),
learn_rate = tune()) %>%
set_mode("regression") %>%
set_engine("xgboost", objective = "reg:squarederror")
## randomForest/ranger
rf_model <- rand_forest(mode = "regression", mtry = .preds(), trees = tune()) %>%
set_engine("ranger")
# Dials create the parameter grids
#Tune applies the parameter grid to the models
# Dials package
boosted_grid <- grid_regular(parameters(boosted_model), levels = 5)
rf_grid <- grid_regular(parameters(rf_model), levels = 10)
# Tune package
boosted_tune <- tune_grid(boosted_model,
tidy_rec,
resamples = kfolds,
grid = boosted_grid,
metrics = metric_set(rmse, rsq, mae))
rf_tune <- tune_grid(rf_model,
tidy_rec,
resamples = kfolds,
grid = rf_grid,
metrics = metric_set(rmse, rsq, mae))
# Use Tune package to extract best parameters using rsq/rmse/mae
boosted_param <- boosted_tune %>% select_best("rmse")
rf_param <- rf_tune %>% select_best("rmse")
#collect_metrics(boosted_tune)
# Apply parameters to the models
final_boosted_model <- finalize_model(boosted_model, boosted_param)
final_rf_model <- finalize_model(rf_model, rf_param)
# Workflow package
# for combining model, parameters, and preprocessing
boosted_wf <- workflow() %>%
add_model(final_boosted_model) %>%
add_recipe(tidy_rec)
rf_wf <- workflow() %>%
add_model(final_rf_model) %>%
add_recipe(tidy_rec)
# Yardstick package
# for extracting metrics from the model
boosted_res <- last_fit(boosted_wf, split)
rf_res <- last_fit(rf_wf, split)
bind_rows(
boosted_res %>% mutate(model = "xgb"),
rf_res %>% mutate(model = "rf")
) %>% unnest(.metrics)
bind_rows(
boosted_res %>% mutate(model = "xgb"),
rf_res %>% mutate(model = "rf")
) %>% unnest(.metrics) %>% select(.metric, .estimator, .estimate, model)
final_model <- fit(rf_wf, final_data)
saveRDS(final_model, "Model/ya_rent_model.rds")
setwd("~/YA Rent Prediction")
saveRDS(final_model, "Model/ya_rent_model.rds")
saveRDS(final_model, "~/YA Rent Prediction/Model/ya_rent_model.rds")
library(here)
install.packages("here")
library(here)
saveRDS(final_model, here("Model/ya_rent_model.rds"))
YA_data <- read.csv(here("Data/YA_apartments.csv"))
final_data %>% rmarkdown::paged_table()
library(shiny)
library(shinydashboard)
library(tidymodels)
library(tidyverse)
library(here)
model <- readRDS(here("Model/ya_rent_model.rds"))
View(final_data)
final_data %>% summary()
final_data$Type.of.Laundry %>% factor()
final_data$Type.of.Laundry %>% factor() %>% summary()
runApp('YARentPredictionApp')
prediction <- predict(
model,
tibble("Beds" = 4,
"Bath" = 2,
"Parking" = "Yes",
"Utilities" = "No",
"Type.of.Laundry" = "In-Unit",
"distance" = 0.4)
)
prediction$.pred
prediction <- predict(
model,
tibble("Beds" = 4,
"Bath" = 2,
"Parking" = "Yes",
"Utilities" = "No",
"Type.of.Laundry" = "In-Unit",
"distance" = 0.4), type = "prob"
)
runApp('YARentPredictionApp')
runApp('YARentPredictionApp')
valueBox(
value = paste0("$ ",round(prediction$.pred, 2)),
subtitle = "Rent",
color = prediction_color,
icon = icon("stock")
)
valueBox(
value = paste0("$ ",round(prediction$.pred, 2)),
subtitle = "Rent",
color = prediction_color,
icon = icon("money-bill")
)
knitr::opts_chunk$set(echo = TRUE)
## Create a directory to store the pages
apartment_dir <- "YA_apt_pages/"
pages <- dir(apartment_dir, full.names = T)
## Create a directory to store the pages
apartment_dir <- "~/YA_apt_pages/"
pages <- dir(apartment_dir, full.names = T)
## Create a function to extract details of apartments
get_apartment_info <- function(page) {
## reading in the apartment page's html source code
html <- read_html(page)
## Extracting apartment's details
info <- html %>%
## grab all elements with that css class
html_nodes(".lg-only , #property-search-profile .heading-2 , .property-attributes") %>%
## extracting only the text inside the element
html_text() %>%
## converting extra white spaces into new line
str_replace_all("\\s{2,}", "\n")
## excluding irrelevant information from the result
info = info[-c(1:218)]
## Building query to obtain latitude and longitude from Google API
map_src <- html %>%
html_element("div.property-buttons-inner > a.cms-btn.cms-btn-secondary") %>%
html_attr("href")
address_query <- str_split(map_src,"=")[[1]][2]
## Querying google api for lat and long
#location<-geocode(address_query)
# Compiling a list of amenities available at each apartment
Amenities = (info[4] %>% str_trim() %>%  str_split("\n"))
data_tmp<- list()
idx = 1
total = length(Amenities[[1]])-1
for( idx in 1:total){
data_tmp[Amenities[[1]][idx]]=Amenities[[1]][idx+1]
}
## Create a data frame to store each apartment's detail
data_frame(
Name = info[1],
Address = info[1] %>% str_replace_all("\n", " ") %>% str_trim(),
Rent = (info[2] %>% str_replace_all("\n", "") %>% str_split("-"))[[1]][1]%>% parse_number(),
Beds = (info[3] %>% str_trim() %>%  str_split("\n")) [[1]][1] %>% parse_number(),
Bath = (info[3] %>% str_trim() %>%  str_split("\n")) [[1]][2]%>% parse_number(),
Parking = ifelse(hasName(data_tmp,"Parking"), "Yes", "No"),
Utilities = ifelse(hasName(data_tmp, "Utilities"), "Yes", "No"),
`Type of Laundry` = ifelse(hasName(data_tmp, "Type of Laundry"),data_tmp$`Type of Laundry`, "In-Unit"),
#Latitude = location$lat,
#Longitude = location$lon
)
}
## get apartment details and store it in a data frame
apartments <- map_df(pages, get_apartment_info)
## Package for web scraping
library(rvest)
## used to check if a web path is allowed to be scraped
library(robotstxt)
##
library(stringr)
##
library(tidyverse)
## Google API
library(ggmap)
library(here)
## get apartment details and store it in a data frame
apartments <- map_df(pages, get_apartment_info)
View(apartments)
View(YA_data)
apartments1 <- apartments
apartments1 %>% merge(YA_data %>% select(Name,Latitude,Longitude))
apartments1 %>% merge(YA_data)
apartments1 %>% merge(YA_data %>% select(-`Type of Laundry`))
apartments1 %>% merge(YA_data %>% select(-c("Type of Laundry")))
apartments1 %>% merge(YA_data %>% select(-Type.of.Laundry))
dd=apartments1 %>% merge(YA_data %>% select(-Type.of.Laundry))
## Save the extract data as a CSV
write_csv(dd, file = here("Data/YA_apartments.csv"))
YA_data <- read.csv(here("Data/YA_apartments.csv"))
View(YA_data)
YA_data <- read.csv(here("Data/YA_apartments.csv"))
str(YA_data)
## excluding irrelevant field such as name and address from the data
data <- YA_data[, -c(1,2)]
summary(data)
## The missing values in Rent column will be dropped since there was no info on the website.
data <- data %>% filter(!is.na(Rent))
## Checking on the website, the 2 missing values in Beds column as supposed to 1 for each.
data$Beds <- data$Beds %>% replace_na(1)
## Create a function to fix the inconsistency in Type of Laundry column
fix_TypeOfLaundry_data <- function (x) {
ifelse(x %in% c("coin","Coin","Coin (in unit W/D for remodels)"), "Coin",
ifelse(x %in% c("In Unit", "in unit washer / Dryer", "In-unit", "In-Unit", "In-unit W/D", "Inp-unit", "On premise", "W/D in Unit", "W/D In unit", "W/D In Unit"), "In-Unit", x))
}
data <- data %>% mutate(
Type.of.Laundry = fix_TypeOfLaundry_data(Type.of.Laundry)
)
## converting categorical column as factors
data$Parking <- factor(data$Parking)
data$Utilities <- factor(data$Utilities)
data$Type.of.Laundry <- factor(data$Type.of.Laundry)
summary(data)
## Latitude and longitude of ISU BONE STUDENT CENTER
ISU_lat = 40.5154253
ISU_long = -88.9950361
## A function to compute the distance between two geo cordinates in km
haversine <- function(longitude1, latitude1, longitude2, latitude2, decimals=3)
{
## convert to radians
longitude1= longitude1 * pi / 180
lat1= lat1 * pi / 180
longitude2= longitude2 * pi / 180
latitude2= latitude2 * pi/ 180
## Earth mean radius in km
R = 6371
a= sin((latitude2- lat1)/2)^2 + cos(lat1)*cos(latitude2)*sin((longitude2 - longitude1)/2)^2
d= R * 2 * asin(sqrt(a))
## distance in km
return( round(d, decimals) )
}
## Compute distance of each apartment from Bone student center in kilometers
final_data <- data %>% mutate(
distance = haversine(ISU_long, ISU_lat, Longitude, Latitude)
)
## Latitude and longitude of ISU BONE STUDENT CENTER
ISU_lat = 40.5154253
ISU_long = -88.9950361
## A function to compute the distance between two geo cordinates in km
haversine <- function(longitude1, latitude1, longitude2, latitude2, decimals=3)
{
## convert to radians
longitude1= longitude1 * pi / 180
latitude1= latitude1 * pi / 180
longitude2= longitude2 * pi / 180
latitude2= latitude2 * pi/ 180
## Earth mean radius in km
R = 6371
a= sin((latitude2- latitude1)/2)^2 + cos(latitude1)*cos(latitude2)*sin((longitude2 - longitude1)/2)^2
d= R * 2 * asin(sqrt(a))
## distance in km
return( round(d, decimals) )
}
## Compute distance of each apartment from Bone student center in kilometers
final_data <- data %>% mutate(
distance = haversine(ISU_long, ISU_lat, Longitude, Latitude)
)
## We exclude latitude and longitude from the final data
final_data <- final_data %>% select(-c(Longitude,Latitude))
final_data %>% rmarkdown::paged_table()
## create train and test data using rsample
set.seed(123)
split <- initial_split(final_data, prop=.7)
train <- training(split)
test <- testing(split)
kfolds <- vfold_cv(train)
# Recipes package
# preprocessing
tidy_rec <- recipe(Rent ~ ., data=train) %>%
step_dummy(all_nominal())
# Parsnip package
# api for creating models
boosted_model <- boost_tree(trees = tune(),
min_n = tune(),
#tree_depth = tune(),
loss_reduction = tune(),
learn_rate = tune()) %>%
set_mode("regression") %>%
set_engine("xgboost", objective = "reg:squarederror")
## randomForest/ranger
rf_model <- rand_forest(mode = "regression", mtry = .preds(), trees = tune()) %>%
set_engine("ranger")
# Dials create the parameter grids
#Tune applies the parameter grid to the models
# Dials package
boosted_grid <- grid_regular(parameters(boosted_model), levels = 5)
rf_grid <- grid_regular(parameters(rf_model), levels = 10)
# Tune package
boosted_tune <- tune_grid(boosted_model,
tidy_rec,
resamples = kfolds,
grid = boosted_grid,
metrics = metric_set(rmse, rsq, mae))
rf_tune <- tune_grid(rf_model,
tidy_rec,
resamples = kfolds,
grid = rf_grid,
metrics = metric_set(rmse, rsq, mae))
# Use Tune package to extract best parameters using rsq/rmse/mae
boosted_param <- boosted_tune %>% select_best("rmse")
rf_param <- rf_tune %>% select_best("rmse")
#collect_metrics(boosted_tune)
# Apply parameters to the models
final_boosted_model <- finalize_model(boosted_model, boosted_param)
final_rf_model <- finalize_model(rf_model, rf_param)
# Workflow package
# for combining model, parameters, and preprocessing
boosted_wf <- workflow() %>%
add_model(final_boosted_model) %>%
add_recipe(tidy_rec)
rf_wf <- workflow() %>%
add_model(final_rf_model) %>%
add_recipe(tidy_rec)
# Yardstick package
# for extracting metrics from the model
boosted_res <- last_fit(boosted_wf, split)
rf_res <- last_fit(rf_wf, split)
bind_rows(
boosted_res %>% mutate(model = "xgb"),
rf_res %>% mutate(model = "rf")
) %>% unnest(.metrics) %>% select(.metric, .estimator, .estimate, model)
final_model <- fit(rf_wf, final_data)
saveRDS(final_model, here("Model/ya_rent_model.rds"))
runApp('YARentPredictionApp')
runApp('YARentPredictionApp')
runApp('YARentPredictionApp')
runApp('YARentPredictionApp')
model <- readRDS("Model/ya_rent_model.rds")
runApp('YARentPredictionApp')
